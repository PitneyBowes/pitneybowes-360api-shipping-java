/*
 * Shipping APIs
 * ### Introduction  The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.   Some of the key API operations available in the Shipping API includes: ### Shipment API  | Operation      | Description | | ----------- | ----------- |  | Get Carriers    | This operation fetches all onboarded carriers. Typically, user will use this service to get list of onboarded carriers and supported properties for those carriers.  |  | Get Countries | This operation fetches list of supported destination countries for a provided carrier and origin country.  |  | Get Services | This operation fetches a list of supported services for a carrier with respect to specific origin and destination country. |  | Get ParcelTypes| This operation fetches ParcelTypes based on carrier, origin and destination country. |  | Get Special Services| This operation fetches Special Services for a given carrier, service, origin and destination country. |  | Get Carrier Accounts| This operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier.  |  | Rate Shop and Get Single Rate| This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used mainly to a rate a shipment before creating shipment.  |  | Create Shipment| This operation creates a new Shipment or Shipment Label. This is for both Domestic and International. | | Get All Shipments| This operation fetches all created Shipments. |  | Get Shipment by Id| Retrieves single shipment using Shipment Id. |  | Reprint Shipment| This operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the Create Shipment response was spoilt or lost. |  | Cancel Shipment| This operation cancels previously created shipment. |  
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pitneybowes.api360.api;

import com.pitneybowes.api360.model.AllDefaults;
import com.pitneybowes.api360.model.CreateDefaults;
import com.pitneybowes.api360.model.CreateDefaultsResponse;
import com.pitneybowes.api360.model.DefaultResponse;
import com.pitneybowes.api360.model.Error;
import com.pitneybowes.api360.model.Errors;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.springframework.web.client.RestClientException;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultsApi
 */
@Disabled
class DefaultsApiTest {

    private final DefaultsApi api = new DefaultsApi();

    
    /**
     * Create Defaults
     *
     * While creating shipment, a few columns/ fields information are used mandatorily, and if the value for those columns are used repetitively, then it is always better to save last used values. And hence, this API has been introduced. Using this API, default values can be set up for frequently used columns/fields information like carrier, its linked services, and special services.  Setting up the defaults will save both time and efforts. 
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void createDefaultsTest() {
        CreateDefaults createDefaults = null;

        CreateDefaultsResponse response = api.createDefaults(createDefaults);

        // TODO: test validations
    }
    
    /**
     * Delete Defaults by ID
     *
     * This operation deletes the existing Defaults.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void deleteDefaultsByIdTest() {
        String defaultID = null;

        api.deleteDefaultsById(defaultID);

        // TODO: test validations
    }
    
    /**
     * Get All Defaults
     *
     * The operation fetches all created Defaults. If query parameters are not provided, it will consider default page as 1 and default size as 10.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void getAllDefaultsTest() {
        String xPBDeveloperPartnerID = null;
        String page = null;
        String size = null;

        AllDefaults response = api.getAllDefaults(xPBDeveloperPartnerID, page, size);

        // TODO: test validations
    }
    
    /**
     * Get Defaults By ID
     *
     * This operation fetches the values set for the Defaults.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void getDefaultsByIdTest() {
        String defaultID = null;

        DefaultResponse response = api.getDefaultsById(defaultID);

        // TODO: test validations
    }
    
    /**
     * Update Defaults
     *
     * This operation updates the values set for Defaults.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void putDefaultsByIdTest() {
        String defaultID = null;
        CreateDefaults createDefaults = null;

        api.putDefaultsById(defaultID, createDefaults);

        // TODO: test validations
    }
    
}
