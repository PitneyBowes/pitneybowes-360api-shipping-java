/*
 * Shipping APIs
 * ### Introduction  The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.   Some of the key API operations available in the Shipping API includes: ### Shipment API  | Operation      | Description | | ----------- | ----------- |  | Get Carriers    | This operation fetches all onboarded carriers. Typically, user will use this service to get list of onboarded carriers and supported properties for those carriers.  |  | Get Countries | This operation fetches list of supported destination countries for a provided carrier and origin country.  |  | Get Services | This operation fetches a list of supported services for a carrier with respect to specific origin and destination country. |  | Get ParcelTypes| This operation fetches ParcelTypes based on carrier, origin and destination country. |  | Get Special Services| This operation fetches Special Services for a given carrier, service, origin and destination country. |  | Get Carrier Accounts| This operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier.  |  | Rate Shop and Get Single Rate| This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used mainly to a rate a shipment before creating shipment.  |  | Create Shipment| This operation creates a new Shipment or Shipment Label. This is for both Domestic and International. | | Get All Shipments| This operation fetches all created Shipments. |  | Get Shipment by Id| Retrieves single shipment using Shipment Id. |  | Reprint Shipment| This operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the Create Shipment response was spoilt or lost. |  | Cancel Shipment| This operation cancels previously created shipment. |  
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pitneybowes.api360.api;

import com.pitneybowes.api360.model.BulkShipmentResponse;
import com.pitneybowes.api360.model.BulkShipmentResponseERR;
import com.pitneybowes.api360.model.CreateBatchRequest;
import com.pitneybowes.api360.model.CreateBatchRequestERR;
import com.pitneybowes.api360.model.CreateBulkShipmentsAPIERRRequest;
import com.pitneybowes.api360.model.CreateBulkShipmentsAPIRequest;
import com.pitneybowes.api360.model.Error;
import com.pitneybowes.api360.model.Errors;
import com.pitneybowes.api360.model.GetShipmentsForBatch;
import com.pitneybowes.api360.model.GetStatusDetailedResponse;
import com.pitneybowes.api360.model.NotFoundErrors;
import com.pitneybowes.api360.model.ProcessShipmentResponse;
import com.pitneybowes.api360.model.ShipmentBatch;
import com.pitneybowes.api360.model.ShipmentBatchResponseERR;
import com.pitneybowes.api360.model.VoidBatchRequest;
import com.pitneybowes.api360.model.VoidBatchResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.springframework.web.client.RestClientException;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for BatchApi
 */
@Disabled
class BatchApiTest {

    private final BatchApi api = new BatchApi();

    
    /**
     * Bulk Import Shipments
     *
     * This operation imports the .CSV file, which includes all the required fields to create shipments in bulk. The payload contains information about the shipments you want to import, such as &#x60;carrier account&#x60;, &#x60;label layout&#x60;, &#x60;service&#x60;, and any &#x60;special services&#x60; required for the shipments. After batch is submitted, user needs to upload csv file of shipment transactions to the uploadURL returned in response.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void bulkImportAPITest() {
        CreateBatchRequest body = null;
        String xPBDeveloperPartnerID = null;

        ShipmentBatch response = api.bulkImportAPI(body, xPBDeveloperPartnerID);

        // TODO: test validations
    }
    
    /**
     * Bulk Import Shipments ERR
     *
     * This operation imports the .CSV file which includes fields required for creating ERR (Electronic Return Receipt) Bulk Shipments.    The payload, which is used for shipment transactions, contains the following essential information in .CSV file:   - Carrier Account   - Output format: Shipping Label and Coversheet    - Services, and   - Special Services     The above-mentioned information are stored in AWS-S3 which in turn provides URL to users. When Batch is submitted, S3 returned URL along with .CSV file are uploaded, which generates BatchID.    The same BatchID is used to track the status of BulkImport. 
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void bulkImportAPIERRTest() {
        CreateBatchRequestERR body = null;
        String xPBDeveloperPartnerID = null;

        ShipmentBatchResponseERR response = api.bulkImportAPIERR(body, xPBDeveloperPartnerID);

        // TODO: test validations
    }
    
    /**
     * Create Bulk Shipments
     *
     * This operation creates a batch of bulk (larger quantities) shipments for single or multiple recipients. The shipments can be addressed to a single or multiple recipients with different combination of carrier, service special services and parcel type. &#x60;carrierAccountId&#x60;, &#x60;parcelType&#x60;, &#x60;serviceId&#x60; and &#x60;specialServices&#x60; are used as default when user do not wish to provide at shipment level. If user choose to provide these at Shipment level then it overrides the values provided at root level. At shipment level either you can wish to provide all of &#x60;carrierAccountId&#x60;, &#x60;parcelType&#x60;, &#x60;serviceId&#x60; and &#x60;specialServices&#x60; or not provide all of them if wants to use default ones from root level. If user do not provide any one out of &#x60;carrierAccountId&#x60;, &#x60;parcelType&#x60; and &#x60;serviceId&#x60; at shipment level it would result in validation error
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void createBulkShipmentsAPITest() {
        CreateBulkShipmentsAPIRequest body = null;
        String xPBDeveloperPartnerID = null;

        BulkShipmentResponse response = api.createBulkShipmentsAPI(body, xPBDeveloperPartnerID);

        // TODO: test validations
    }
    
    /**
     * Create Bulk Shipments ERR
     *
     * ERR (Electronic Return Receipt) is an official United States Postal Service® (USPS) document designed to be equivalent to the hardcopy &#39;green card&#39; Return Receipt. &lt;br /&gt;    It provides the following information:   - Name of the Recipient     - Time when article is delivered   - Signature (image) of the Recipient     - Address where the item is delivered, and    - Date when the article gets delivered.      ERR is combined with certain classes and categories of mails, which are as follow:   - First-Class Mail®    - Priority Mail®     ERR Batch supports two types of Shipment Document format:    - Shipping Label    - Coversheet       This API \&quot;Create Bulk Shipments with ERR\&quot; operation requires the following information:   - Recipient (Single or Multiple)   - Carrier - USPS   - Service   - Parcel Type, and   - Special Service.    The ERR API works at two levels: Shipment level and Root level. Root level is marked as Default, where multiple shipments are processed and entities are common for all shipments. While at Shipment level, entities might differ. &lt;br /&gt;   User can either define values for *CarrierAccountID*, *ParcelType*, *ServiceID*, and *SpecialService* respectively at the Root level for all shipments, or mention the values at Shipment level, i.e., for individual shipment(s).     If user does not provide values for the above-mentioned fields combinedly at Shipment level, then the default values for these fields provided at Root level will be considered. While, if user provides these values combinedly at Shipment Level for individual shipment(s), it will override the values defined at Root level. &lt;br /&gt;   &lt;br /&gt;   *Condition: The fields *CarrierAccountID*, *ParcelType*, *ServiceID* are treated as a combination, and values against each field must be provided if user selects Shipment level. In case any of these field(s) out of the mentioned combination is/are missing, it will return validation error.*    
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void createBulkShipmentsAPIERRTest() {
        CreateBulkShipmentsAPIERRRequest body = null;
        String xPBDeveloperPartnerID = null;

        BulkShipmentResponseERR response = api.createBulkShipmentsAPIERR(body, xPBDeveloperPartnerID);

        // TODO: test validations
    }
    
    /**
     * Get Batch Status
     *
     * This operation retrieves the status of an existing Batch using *Batch ID*. Once the Job status is completed, the URL received from Response can be used to download the shipping label in PDF format.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void getBatchStatusAPITest() {
        String batchId = null;
        String xPBDeveloperPartnerID = null;

        GetStatusDetailedResponse response = api.getBatchStatusAPI(batchId, xPBDeveloperPartnerID);

        // TODO: test validations
    }
    
    /**
     * Get Batch Shipment Details
     *
     * \&quot;This API operation provides the shipment details for those shipments which are SUCCESS or FAILED during batch processing at the following levels: - addressValidation - rating - labelGeneration, and - voidLabel  Based on fields/data mentioned in Query Parameter, user can check shipment details for particular status at any levels. &lt;br /&gt; If no values are provided in the fields mentioned in Query Parameter, the default for each will be: - Page: 1  - Size: 20 - Status: SUCCESS/FAILED. 
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void getShipmentDetailsForBatchAPITest() {
        String batchId = null;
        String xPBDeveloperPartnerID = null;
        Integer page = null;
        Integer size = null;
        String status = null;
        String step = null;

        GetShipmentsForBatch response = api.getShipmentDetailsForBatchAPI(batchId, xPBDeveloperPartnerID, page, size, status, step);

        // TODO: test validations
    }
    
    /**
     * Process Batch
     *
     * This operation processes (executes) the existing Batch. The payload for this endpoint needs only an empty JSON object and no additional data is required in the request body. The BatchID parameter located in the endpoint specifies which batch of shipments to process.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void processBatchAPITest() {
        String batchId = null;
        String xPBDeveloperPartnerID = null;

        ProcessShipmentResponse response = api.processBatchAPI(batchId, xPBDeveloperPartnerID);

        // TODO: test validations
    }
    
    /**
     * Void Batch Shipping Labels
     *
     * This operation cancels (voids) shipments which are created using the Batch API operation &#x60;createBulkShipments&#x60;. &lt;br /&gt; If user wants to cancel specific shipment(s) of the Batch, then s/he needs to pass the *Shipment ID* for the selected shipments in the &#x60;shipmentIDs&#x60; array. While if user wants to cancel all shipments of the Batch, then s/he does not need to provide any *Shipment ID* in the array under request body.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void voidShippingLabelTest() {
        String batchId = null;
        String xPBDeveloperPartnerID = null;
        VoidBatchRequest voidBatchRequest = null;

        VoidBatchResponse response = api.voidShippingLabel(batchId, xPBDeveloperPartnerID, voidBatchRequest);

        // TODO: test validations
    }
    
}
