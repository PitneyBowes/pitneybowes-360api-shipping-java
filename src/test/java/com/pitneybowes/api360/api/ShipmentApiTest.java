/*
 * Shipping APIs
 * ### Introduction  The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.   Some of the key API operations available in the Shipping API includes: ### Shipment API  | Operation      | Description | | ----------- | ----------- |  | Get Carriers    | This operation fetches all onboarded carriers. Typically, user will use this service to get list of onboarded carriers and supported properties for those carriers.  |  | Get Countries | This operation fetches list of supported destination countries for a provided carrier and origin country.  |  | Get Services | This operation fetches a list of supported services for a carrier with respect to specific origin and destination country. |  | Get ParcelTypes| This operation fetches ParcelTypes based on carrier, origin and destination country. |  | Get Special Services| This operation fetches Special Services for a given carrier, service, origin and destination country. |  | Get Carrier Accounts| This operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier.  |  | Rate Shop and Get Single Rate| This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used mainly to a rate a shipment before creating shipment.  |  | Create Shipment| This operation creates a new Shipment or Shipment Label. This is for both Domestic and International. | | Get All Shipments| This operation fetches all created Shipments. |  | Get Shipment by Id| Retrieves single shipment using Shipment Id. |  | Reprint Shipment| This operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the Create Shipment response was spoilt or lost. |  | Cancel Shipment| This operation cancels previously created shipment. |  
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pitneybowes.api360.api;

import com.pitneybowes.api360.model.BPODDownloadRequest;
import com.pitneybowes.api360.model.BPODDownloadResponse;
import com.pitneybowes.api360.model.CancelShipment;
import com.pitneybowes.api360.model.CancelStampsRequestERR;
import com.pitneybowes.api360.model.CancelStampsResponseERR;
import com.pitneybowes.api360.model.Carriers;
import com.pitneybowes.api360.model.CountriesInner;
import com.pitneybowes.api360.model.CreateShipment200Response;
import com.pitneybowes.api360.model.CreateShipmentRequest;
import com.pitneybowes.api360.model.Error;
import com.pitneybowes.api360.model.Errors;
import com.pitneybowes.api360.model.GetAllShipments;
import com.pitneybowes.api360.model.GetCarrierAccounts200Response;
import com.pitneybowes.api360.model.GetRates200Response;
import com.pitneybowes.api360.model.GetRatesRequest;
import com.pitneybowes.api360.model.GetSingleShipment;
import com.pitneybowes.api360.model.NotFoundErrors;
import com.pitneybowes.api360.model.ParcelTypesInner;
import com.pitneybowes.api360.model.ReprintShipment;
import com.pitneybowes.api360.model.ReturnLabel;
import com.pitneybowes.api360.model.ReturnLabelResponse;
import com.pitneybowes.api360.model.ServicesInner;
import com.pitneybowes.api360.model.SignatureFileResponse;
import com.pitneybowes.api360.model.SpecialServices;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.springframework.web.client.RestClientException;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ShipmentApi
 */
@Disabled
class ShipmentApiTest {

    private final ShipmentApi api = new ShipmentApi();

    
    /**
     * Cancel Shipment
     *
     * This operation cancel/void shipment.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void cancelShipmentByIdTest() {
        String shipmentId = null;
        String xPBDeveloperPartnerID = null;

        CancelShipment response = api.cancelShipmentById(shipmentId, xPBDeveloperPartnerID);

        // TODO: test validations
    }
    
    /**
     * Cancel Stamps ERR
     *
     * This operation cancels (voids) stamps generated for ERR (Electronic Return Receipt).  - User needs to provide *Stamp IDs* to cancel those specific ERR stamps.  - User can download the *Refund Form* having details of generated Postage.  - At once, maximum 1000 stamps can be requested for cancelation. 
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void cancelStampsERRTest() {
        CancelStampsRequestERR cancelStampsRequestERR = null;
        String xPBDeveloperPartnerID = null;

        CancelStampsResponseERR response = api.cancelStampsERR(cancelStampsRequestERR, xPBDeveloperPartnerID);

        // TODO: test validations
    }
    
    /**
     * Create Return label shipment
     *
     * This operation creates a return label based on a previous shipment. &lt;br&gt; The return label can be created in two ways:  &lt;br&gt; 1. User need not to provide any details of package, address and service. The API would take all details from the shipmentId mentioned in the path parameter and would swap the address and create return label. However for UPS &#x60;specialServices&#x60; object is required as carrier mandates to provide package description with PRL special service. &lt;br&gt; 2. User can customize the request by passing &#x60;fromAddress&#x60;, &#x60;toAddress&#x60;, &#x60;parcelType&#x60;, &#x60;serviceId&#x60; in the request itself. &lt;br&gt; Please Note that for UPS it is required to pass &#x60;specialServices&#x60; object with &#x60;PRL&#x60; service id and  input parameters with name as &#x60;RETURN_PKG_DESCRIPTION&#x60;. &lt;br&gt; For FedEx &#x60;specialServices&#x60; object is not required and PRL is added by default while creating return.  If user wishes to provide RMA number, it can be passed in &#x60;specialServices&#x60; object in the request body. &lt;br&gt; Please Note If user provides any information in this request it overrides the information in onward shipment which was created &lt;br&gt; For example if user provides toAddress in the request the return label will get created with recipient as mentioned in toAddress and  if user provides fromAddress in the request, the return label will be created with sender as mentioned in fromAddress
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void createReturnLabelTest() {
        String shipmentId = null;
        ReturnLabel returnLabel = null;
        String xPBDeveloperPartnerID = null;

        ReturnLabelResponse response = api.createReturnLabel(shipmentId, returnLabel, xPBDeveloperPartnerID);

        // TODO: test validations
    }
    
    /**
     * Create Shipment
     *
     * This operation creates a new Shipment or Shipment Label. This is for both Domestic and International.&lt;br&gt; For domestic, Create a shipment requires domestic addresses (within same country)- ToAddress and FromAddress, and  carrier service and special service.&lt;br&gt; While for International, Create a shipment requires international delivery, that is ToAddress must be the different country (and not the same country mentioned in From Address), selected services, special services, and customs information. &lt;br&gt; &lt;br&gt; Note- To create Return shipment using this API- If PRL (return special service) is used, user need to provide sender address (from where return shipment is to be created) in &#x60;fromAddress&#x60; object and recipient address (to where return is to be created) in &#x60;toAddress&#x60; object. System will not swap the address for return in this API. If you want to create return for the already created shipment, you may use &#x60;Create Return Label Shipment&#x60; API. &lt;br&gt; &lt;br&gt; Note: Currently Shipment created from below API gets assigned to the Default location of the subscription.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void createShipmentTest() {
        CreateShipmentRequest createShipmentRequest = null;
        String xPBDeveloperPartnerID = null;

        CreateShipment200Response response = api.createShipment(createShipmentRequest, xPBDeveloperPartnerID);

        // TODO: test validations
    }
    
    /**
     * Download BPOD Files
     *
     * This API operation is used to download bulk of ERR (*Electronic Return Receipt*) - POD (*Proof of Delivery*) files, which are specific to USPS carrier. &lt;br /&gt;   User can download BPOD (*Bulk Proof of Delivery*) files either using *Shipment IDs* or *Date Range*.    If user wants to check records based on dates and download BPOD files accordingly, then *Start Date* and *End Date* need to be passed in the request body as filter. Else *Shipment IDs* will be used as default value when user does not provide *DateRange* filter. &lt;br /&gt;   User is restricted to download 1000 BPOD files as max limit. 
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void downloadBpodFilesTest() {
        String xPBDeveloperPartnerID = null;
        String startDate = null;
        String endDate = null;
        BPODDownloadRequest body = null;

        BPODDownloadResponse response = api.downloadBpodFiles(xPBDeveloperPartnerID, startDate, endDate, body);

        // TODO: test validations
    }
    
    /**
     * Get All Shipments
     *
     * This operation fetches all created Shipments. If query parameters are not provided, it will default endDate as current date, page as 1 and size as 10.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void getAllShipmentsTest() {
        String xPBDeveloperPartnerID = null;
        String startDate = null;
        String endDate = null;
        String page = null;
        String size = null;

        GetAllShipments response = api.getAllShipments(xPBDeveloperPartnerID, startDate, endDate, page, size);

        // TODO: test validations
    }
    
    /**
     * Get Carrier Accounts
     *
     * This operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void getCarrierAccountsTest() {
        String xPBDeveloperPartnerID = null;

        GetCarrierAccounts200Response response = api.getCarrierAccounts(xPBDeveloperPartnerID);

        // TODO: test validations
    }
    
    /**
     * Get Carriers
     *
     * This operation fetches all supported carriers. This service is used to get list of supported carriers and their properties.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void getCarriersTest() {
        String xPBDeveloperPartnerID = null;

        Carriers response = api.getCarriers(xPBDeveloperPartnerID);

        // TODO: test validations
    }
    
    /**
     * Get Countries
     *
     * This operation fetches list of supported destination countries for a provided carrier and origin country. If query parameters are not provided, it will default to &#x60;USPS&#x60; as carrier and &#x60;US&#x60; as origin country.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void getCountriesTest() {
        String xPBDeveloperPartnerID = null;
        String carrier = null;
        String originCountryCode = null;

        List<CountriesInner> response = api.getCountries(xPBDeveloperPartnerID, carrier, originCountryCode);

        // TODO: test validations
    }
    
    /**
     * Get Parcel Types
     *
     * This operation fetches Parcel Types based on the provided carrier, origin county, and the destination country. If query parameters are not provided, this will default to &#x60;USPS&#x60; as carrier, &#x60;US&#x60; as both origin and destination country code.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void getParcelTypesTest() {
        String xPBDeveloperPartnerID = null;
        String carrier = null;
        String originCountryCode = null;
        String destinationCountryCode = null;

        List<ParcelTypesInner> response = api.getParcelTypes(xPBDeveloperPartnerID, carrier, originCountryCode, destinationCountryCode);

        // TODO: test validations
    }
    
    /**
     * Rate Shop and Get Single Rate
     *
     * This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. If parcelType is not provided, it will default to &#x60;PKG&#x60;. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used mainly to a rate a shipment before creating shipment.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void getRatesTest() {
        GetRatesRequest getRatesRequest = null;
        String xPBDeveloperPartnerID = null;
        Boolean compactResponse = null;

        GetRates200Response response = api.getRates(getRatesRequest, xPBDeveloperPartnerID, compactResponse);

        // TODO: test validations
    }
    
    /**
     * Get Services
     *
     * This operation fetches a list of supported services for a carrier with respect to specific origin and destination country. If query parameters are not provided, this will default to &#x60;USPS&#x60; as carrier, &#x60;US&#x60; as both origin and destination country code.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void getServicesTest() {
        String xPBDeveloperPartnerID = null;
        String carrier = null;
        String originCountryCode = null;
        String destinationCountryCode = null;

        List<ServicesInner> response = api.getServices(xPBDeveloperPartnerID, carrier, originCountryCode, destinationCountryCode);

        // TODO: test validations
    }
    
    /**
     * Signature Image ERR
     *
     * This operation provides a downloadable link which consists of a signature image for specific ERR (Electronic Return Receipt) shipment, and this is known as POD. &lt;br /&gt; Proof of Delivery (POD) is a document or file that shows an evidence of shipment delivery. This file contains the digital copy of recipient&#39;s signature, i.e., the signature image, in the form of downloadable link or URL.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void getSignatureImageERRTest() {
        String shipmentId = null;
        String xPBDeveloperPartnerID = null;

        SignatureFileResponse response = api.getSignatureImageERR(shipmentId, xPBDeveloperPartnerID);

        // TODO: test validations
    }
    
    /**
     * Get Special Services
     *
     * This operation fetches Special Services for a given carrier, service, origin country, and the destination country. If query parameters are not provided, it will default to &#x60;USPS&#x60; as carrier,&#x60;US&#x60; as both origin and destination country and would show for all service and parcel types
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void getSpecialServicesTest() {
        String xPBDeveloperPartnerID = null;
        String service = null;
        String parcel = null;
        String carrier = null;
        String originCountryCode = null;
        String destinationCountryCode = null;

        SpecialServices response = api.getSpecialServices(xPBDeveloperPartnerID, service, parcel, carrier, originCountryCode, destinationCountryCode);

        // TODO: test validations
    }
    
    /**
     * Reprint Shipment
     *
     * This operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the Create Shipment response was spoilt or lost.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void reprintShipmentByIdTest() {
        String shipmentId = null;
        String xPBDeveloperPartnerID = null;
        Boolean compactResponse = null;

        ReprintShipment response = api.reprintShipmentById(shipmentId, xPBDeveloperPartnerID, compactResponse);

        // TODO: test validations
    }
    
    /**
     * Get Shipment by Id
     *
     * This operation retrieves shipment details using shipmentId.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void shipmentByIdTest() {
        String shipmentId = null;
        String xPBDeveloperPartnerID = null;

        GetSingleShipment response = api.shipmentById(shipmentId, xPBDeveloperPartnerID);

        // TODO: test validations
    }
    
}
