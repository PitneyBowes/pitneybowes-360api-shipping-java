/*
 * Shipping APIs
 * ### Introduction  The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.   Some of the key API operations available in the Shipping API includes: ### Shipment API  | Operation      | Description | | ----------- | ----------- |  | Get Carriers    | This operation fetches all onboarded carriers. Typically, user will use this service to get list of onboarded carriers and supported properties for those carriers.  |  | Get Countries | This operation fetches list of supported destination countries for a provided carrier and origin country.  |  | Get Services | This operation fetches a list of supported services for a carrier with respect to specific origin and destination country. |  | Get ParcelTypes| This operation fetches ParcelTypes based on carrier, origin and destination country. |  | Get Special Services| This operation fetches Special Services for a given carrier, service, origin and destination country. |  | Get Carrier Accounts| This operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier.  |  | Rate Shop and Get Single Rate| This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used mainly to a rate a shipment before creating shipment.  |  | Create Shipment| This operation creates a new Shipment or Shipment Label. This is for both Domestic and International. | | Get All Shipments| This operation fetches all created Shipments. |  | Get Shipment by Id| Retrieves single shipment using Shipment Id. |  | Reprint Shipment| This operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the Create Shipment response was spoilt or lost. |  | Cancel Shipment| This operation cancels previously created shipment. |  
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pitneybowes.api360.api;

import com.pitneybowes.api360.model.CancelShipmentV2;
import com.pitneybowes.api360.model.CreateShipmentV2Request;
import com.pitneybowes.api360.model.DomesticShipmentResponseV2;
import com.pitneybowes.api360.model.Error;
import com.pitneybowes.api360.model.Errors;
import com.pitneybowes.api360.model.NotFoundErrors;
import com.pitneybowes.api360.model.ReprintShipmentV2;
import com.pitneybowes.api360.model.ShipmentCancelV2;
import com.pitneybowes.api360.model.ShipmentReprintV2;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.springframework.web.client.RestClientException;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ShipmentByRateShopApi
 */
@Disabled
class ShipmentByRateShopApiTest {

    private final ShipmentByRateShopApi api = new ShipmentByRateShopApi();

    
    /**
     * Cancel Shipment
     *
     * The operation cancel/void shipment.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void cancelShipmentByIdV2Test() {
        ShipmentCancelV2 shipmentCancelV2 = null;
        String xPBDeveloperPartnerId = null;
        String xPBLocationId = null;
        String xPBTransactionId = null;

        CancelShipmentV2 response = api.cancelShipmentByIdV2(shipmentCancelV2, xPBDeveloperPartnerId, xPBLocationId, xPBTransactionId);

        // TODO: test validations
    }
    
    /**
     * Create Shipment
     *
     * The operation creates a new Shipment or generate a Shipment Label. - To create a domestic shipment, the operation requires   - Domestic addresses &#39;To&#39; and &#39;From&#39; locations respectively within the same country   - carrier services, and   - associated special services. - While for the International shipment, the operation requires   - International address(es) for delivery, that is &#39;To&#39; address must be the international country location(s) and not the same country mentioned in &#39;From&#39; address   - supported international carrier services   - associated special service(s), and    - customs information. 
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void createShipmentV2Test() {
        CreateShipmentV2Request createShipmentV2Request = null;
        String xPBDeveloperPartnerId = null;
        String xPBLocationId = null;
        String xPBTransactionId = null;

        DomesticShipmentResponseV2 response = api.createShipmentV2(createShipmentV2Request, xPBDeveloperPartnerId, xPBLocationId, xPBTransactionId);

        // TODO: test validations
    }
    
    /**
     * Reprint Shipment
     *
     * The operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentID returned by the original created shipment request. Use this only if the shipping label in the Create Shipment response is missing or lost.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void reprintShipmentByIdV2Test() {
        ShipmentReprintV2 shipmentReprintV2 = null;
        String xPBDeveloperPartnerId = null;
        String xPBLocationId = null;
        String xPBTransactionId = null;

        ReprintShipmentV2 response = api.reprintShipmentByIdV2(shipmentReprintV2, xPBDeveloperPartnerId, xPBLocationId, xPBTransactionId);

        // TODO: test validations
    }
    
}
