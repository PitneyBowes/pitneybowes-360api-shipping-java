/*
 * Shipping APIs
 * ### Introduction  The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.   Some of the key API operations available in the Shipping API includes: ### Shipment API  | Operation      | Description | | ----------- | ----------- |  | Get Carriers    | This operation fetches all onboarded carriers. Typically, user will use this service to get list of onboarded carriers and supported properties for those carriers.  |  | Get Countries | This operation fetches list of supported destination countries for a provided carrier and origin country.  |  | Get Services | This operation fetches a list of supported services for a carrier with respect to specific origin and destination country. |  | Get ParcelTypes| This operation fetches ParcelTypes based on carrier, origin and destination country. |  | Get Special Services| This operation fetches Special Services for a given carrier, service, origin and destination country. |  | Get Carrier Accounts| This operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier.  |  | Rate Shop and Get Single Rate| This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used mainly to a rate a shipment before creating shipment.  |  | Create Shipment| This operation creates a new Shipment or Shipment Label. This is for both Domestic and International. | | Get All Shipments| This operation fetches all created Shipments. |  | Get Shipment by Id| Retrieves single shipment using Shipment Id. |  | Reprint Shipment| This operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the Create Shipment response was spoilt or lost. |  | Cancel Shipment| This operation cancels previously created shipment. |  
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pitneybowes.api360.api;

import java.math.BigDecimal;
import com.pitneybowes.api360.model.Error;
import com.pitneybowes.api360.model.Errors;
import com.pitneybowes.api360.model.GetAllPickups;
import com.pitneybowes.api360.model.GetPickupCancelledDocumentRequest;
import com.pitneybowes.api360.model.GetPickupCancelledDocumentResponse;
import com.pitneybowes.api360.model.GetPickupDocument;
import com.pitneybowes.api360.model.SchedulePickup200Response;
import com.pitneybowes.api360.model.SchedulePickupCancelRequest;
import com.pitneybowes.api360.model.SchedulePickupCancelResponse;
import com.pitneybowes.api360.model.SchedulePickupRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.springframework.web.client.RestClientException;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PickupsApi
 */
@Disabled
class PickupsApiTest {

    private final PickupsApi api = new PickupsApi();

    
    /**
     * Cancel Pickups
     *
     * This operation is used to Cancel the scheduled pickup.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void cancelPickupsTest() {
        SchedulePickupCancelRequest schedulePickupCancelRequest = null;
        String xPBDeveloperPartnerID = null;

        SchedulePickupCancelResponse response = api.cancelPickups(schedulePickupCancelRequest, xPBDeveloperPartnerID);

        // TODO: test validations
    }
    
    /**
     * Cancelled Pickup Document
     *
     * This operation is used to get receipt for pickup cancellation. The receipt generated is in PDF format. &lt;br&gt; This operation can create receipt for multiple pickups which are cancelled.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void cancelledPickupDocumentTest() {
        String type = null;
        GetPickupCancelledDocumentRequest getPickupCancelledDocumentRequest = null;
        String xPBDeveloperPartnerID = null;

        GetPickupCancelledDocumentResponse response = api.cancelledPickupDocument(type, getPickupCancelledDocumentRequest, xPBDeveloperPartnerID);

        // TODO: test validations
    }
    
    /**
     * Get Pickup Document
     *
     * This operation returns the scheduled pickup or cancellation receipt in PDF format.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void getPickupDocumentTest() {
        String pickupId = null;
        String xPBDeveloperPartnerID = null;

        GetPickupDocument response = api.getPickupDocument(pickupId, xPBDeveloperPartnerID);

        // TODO: test validations
    }
    
    /**
     * Get Pickups
     *
     * This operation is used to view the history of pickups scheduled or cancelled for your packages.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void getPickupsTest() {
        String xPBDeveloperPartnerID = null;
        String carrier = null;
        String startDate = null;
        String endDate = null;
        String status = null;
        BigDecimal page = null;
        BigDecimal size = null;

        GetAllPickups response = api.getPickups(xPBDeveloperPartnerID, carrier, startDate, endDate, status, page, size);

        // TODO: test validations
    }
    
    /**
     * Schedule Pickup
     *
     * This operation allows to schedule Pickups with USPS, UPS, FedEx and DHLExpress for eligible shipments. &lt;br&gt; Below are four possible combinations for scheduling pickup &lt;br&gt;  &lt;br&gt; 1. When request does not specify &#x60;pickupSummary&#x60; and &#x60;shipmentIds&#x60;- The system would consider all eligible shipments created in a current day. &lt;br&gt; 2. When request specifies only &#x60;shipmentIds&#x60;- Pickup will be created for the shipmentIds mentioned &lt;br&gt; 3. When request specifies only &#x60;pickupSummary&#x60;- Pickup will be created for the pickup details mentioned in the pickupSummary &lt;br&gt; 4. When request specifies both &#x60;pickupSummary&#x60; and &#x60;shipmentIds&#x60;- Pickup will be created including details mentioned in both objects.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void schedulePickupTest() {
        SchedulePickupRequest schedulePickupRequest = null;
        String xPBDeveloperPartnerID = null;

        SchedulePickup200Response response = api.schedulePickup(schedulePickupRequest, xPBDeveloperPartnerID);

        // TODO: test validations
    }
    
}
