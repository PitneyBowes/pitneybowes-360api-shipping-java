/*
 * Shipping APIs
 * ### Introduction  The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.   Some of the key API operations available in the Shipping API includes: ### Shipment API  | Operation      | Description | | ----------- | ----------- |  | Get Carriers    | This operation fetches all onboarded carriers. Typically, user will use this service to get list of onboarded carriers and supported properties for those carriers.  |  | Get Countries | This operation fetches list of supported destination countries for a provided carrier and origin country.  |  | Get Services | This operation fetches a list of supported services for a carrier with respect to specific origin and destination country. |  | Get ParcelTypes| This operation fetches ParcelTypes based on carrier, origin and destination country. |  | Get Special Services| This operation fetches Special Services for a given carrier, service, origin and destination country. |  | Get Carrier Accounts| This operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier.  |  | Rate Shop and Get Single Rate| This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used mainly to a rate a shipment before creating shipment.  |  | Create Shipment| This operation creates a new Shipment or Shipment Label. This is for both Domestic and International. | | Get All Shipments| This operation fetches all created Shipments. |  | Get Shipment by Id| Retrieves single shipment using Shipment Id. |  | Reprint Shipment| This operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the Create Shipment response was spoilt or lost. |  | Cancel Shipment| This operation cancels previously created shipment. |  
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pitneybowes.api360.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.pitneybowes.api360.model.CancelShipmentV2References;
import com.pitneybowes.api360.model.ParcelV2;
import com.pitneybowes.api360.model.RateResponseV2;
import com.pitneybowes.api360.model.ReprintShipmentV2LabelLayoutInner;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * ReprintShipmentV2
 */
@JsonPropertyOrder({
  ReprintShipmentV2.JSON_PROPERTY_SHIPMENT_ID,
  ReprintShipmentV2.JSON_PROPERTY_PARCEL_TRACKING_NUMBER,
  ReprintShipmentV2.JSON_PROPERTY_LABEL_LAYOUT,
  ReprintShipmentV2.JSON_PROPERTY_PARCEL,
  ReprintShipmentV2.JSON_PROPERTY_RATE,
  ReprintShipmentV2.JSON_PROPERTY_REFERENCES,
  ReprintShipmentV2.JSON_PROPERTY_PRINT_STATUS
})
@JsonTypeName("reprintShipmentV2")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-09-30T12:57:37.504069+05:30[Asia/Kolkata]", comments = "Generator version: 7.7.0")
public class ReprintShipmentV2 {
  public static final String JSON_PROPERTY_SHIPMENT_ID = "shipmentId";
  private String shipmentId;

  public static final String JSON_PROPERTY_PARCEL_TRACKING_NUMBER = "parcelTrackingNumber";
  private String parcelTrackingNumber;

  public static final String JSON_PROPERTY_LABEL_LAYOUT = "labelLayout";
  private List<ReprintShipmentV2LabelLayoutInner> labelLayout = new ArrayList<>();

  public static final String JSON_PROPERTY_PARCEL = "parcel";
  private ParcelV2 parcel;

  public static final String JSON_PROPERTY_RATE = "rate";
  private RateResponseV2 rate;

  public static final String JSON_PROPERTY_REFERENCES = "references";
  private CancelShipmentV2References references;

  public static final String JSON_PROPERTY_PRINT_STATUS = "printStatus";
  private String printStatus;

  public ReprintShipmentV2() {
  }

  public ReprintShipmentV2 shipmentId(String shipmentId) {
    
    this.shipmentId = shipmentId;
    return this;
  }

  /**
   * The shipmentId, a unique identifier for an individual Shipment, which is used for Reprint or Cancel.
   * @return shipmentId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SHIPMENT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getShipmentId() {
    return shipmentId;
  }


  @JsonProperty(JSON_PROPERTY_SHIPMENT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setShipmentId(String shipmentId) {
    this.shipmentId = shipmentId;
  }

  public ReprintShipmentV2 parcelTrackingNumber(String parcelTrackingNumber) {
    
    this.parcelTrackingNumber = parcelTrackingNumber;
    return this;
  }

  /**
   * The Tracking number given to the Parcel for tracking purpose.
   * @return parcelTrackingNumber
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PARCEL_TRACKING_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getParcelTrackingNumber() {
    return parcelTrackingNumber;
  }


  @JsonProperty(JSON_PROPERTY_PARCEL_TRACKING_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setParcelTrackingNumber(String parcelTrackingNumber) {
    this.parcelTrackingNumber = parcelTrackingNumber;
  }

  public ReprintShipmentV2 labelLayout(List<ReprintShipmentV2LabelLayoutInner> labelLayout) {
    
    this.labelLayout = labelLayout;
    return this;
  }

  public ReprintShipmentV2 addLabelLayoutItem(ReprintShipmentV2LabelLayoutInner labelLayoutItem) {
    if (this.labelLayout == null) {
      this.labelLayout = new ArrayList<>();
    }
    this.labelLayout.add(labelLayoutItem);
    return this;
  }

  /**
   * It defines the layout of the shipping label.
   * @return labelLayout
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LABEL_LAYOUT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<ReprintShipmentV2LabelLayoutInner> getLabelLayout() {
    return labelLayout;
  }


  @JsonProperty(JSON_PROPERTY_LABEL_LAYOUT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLabelLayout(List<ReprintShipmentV2LabelLayoutInner> labelLayout) {
    this.labelLayout = labelLayout;
  }

  public ReprintShipmentV2 parcel(ParcelV2 parcel) {
    
    this.parcel = parcel;
    return this;
  }

  /**
   * Get parcel
   * @return parcel
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PARCEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ParcelV2 getParcel() {
    return parcel;
  }


  @JsonProperty(JSON_PROPERTY_PARCEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setParcel(ParcelV2 parcel) {
    this.parcel = parcel;
  }

  public ReprintShipmentV2 rate(RateResponseV2 rate) {
    
    this.rate = rate;
    return this;
  }

  /**
   * Get rate
   * @return rate
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public RateResponseV2 getRate() {
    return rate;
  }


  @JsonProperty(JSON_PROPERTY_RATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRate(RateResponseV2 rate) {
    this.rate = rate;
  }

  public ReprintShipmentV2 references(CancelShipmentV2References references) {
    
    this.references = references;
    return this;
  }

  /**
   * Get references
   * @return references
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REFERENCES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CancelShipmentV2References getReferences() {
    return references;
  }


  @JsonProperty(JSON_PROPERTY_REFERENCES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setReferences(CancelShipmentV2References references) {
    this.references = references;
  }

  public ReprintShipmentV2 printStatus(String printStatus) {
    
    this.printStatus = printStatus;
    return this;
  }

  /**
   * Status of the Printed Label.
   * @return printStatus
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PRINT_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPrintStatus() {
    return printStatus;
  }


  @JsonProperty(JSON_PROPERTY_PRINT_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPrintStatus(String printStatus) {
    this.printStatus = printStatus;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReprintShipmentV2 reprintShipmentV2 = (ReprintShipmentV2) o;
    return Objects.equals(this.shipmentId, reprintShipmentV2.shipmentId) &&
        Objects.equals(this.parcelTrackingNumber, reprintShipmentV2.parcelTrackingNumber) &&
        Objects.equals(this.labelLayout, reprintShipmentV2.labelLayout) &&
        Objects.equals(this.parcel, reprintShipmentV2.parcel) &&
        Objects.equals(this.rate, reprintShipmentV2.rate) &&
        Objects.equals(this.references, reprintShipmentV2.references) &&
        Objects.equals(this.printStatus, reprintShipmentV2.printStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(shipmentId, parcelTrackingNumber, labelLayout, parcel, rate, references, printStatus);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReprintShipmentV2 {\n");
    sb.append("    shipmentId: ").append(toIndentedString(shipmentId)).append("\n");
    sb.append("    parcelTrackingNumber: ").append(toIndentedString(parcelTrackingNumber)).append("\n");
    sb.append("    labelLayout: ").append(toIndentedString(labelLayout)).append("\n");
    sb.append("    parcel: ").append(toIndentedString(parcel)).append("\n");
    sb.append("    rate: ").append(toIndentedString(rate)).append("\n");
    sb.append("    references: ").append(toIndentedString(references)).append("\n");
    sb.append("    printStatus: ").append(toIndentedString(printStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

