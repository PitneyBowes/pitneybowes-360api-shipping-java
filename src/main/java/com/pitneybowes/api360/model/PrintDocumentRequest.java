/*
 * Shipping APIs
 * ### Introduction  The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.   Some of the key API operations available in the Shipping API includes: ### Shipment API  | Operation      | Description | | ----------- | ----------- |  | Get Carriers    | This operation fetches all onboarded carriers. Typically, user will use this service to get list of onboarded carriers and supported properties for those carriers.  |  | Get Countries | This operation fetches list of supported destination countries for a provided carrier and origin country.  |  | Get Services | This operation fetches a list of supported services for a carrier with respect to specific origin and destination country. |  | Get ParcelTypes| This operation fetches ParcelTypes based on carrier, origin and destination country. |  | Get Special Services| This operation fetches Special Services for a given carrier, service, origin and destination country. |  | Get Carrier Accounts| This operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier.  |  | Rate Shop and Get Single Rate| This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used mainly to a rate a shipment before creating shipment.  |  | Create Shipment| This operation creates a new Shipment or Shipment Label. This is for both Domestic and International. | | Get All Shipments| This operation fetches all created Shipments. |  | Get Shipment by Id| Retrieves single shipment using Shipment Id. |  | Reprint Shipment| This operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the Create Shipment response was spoilt or lost. |  | Cancel Shipment| This operation cancels previously created shipment. |  
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pitneybowes.api360.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.pitneybowes.api360.model.PrintDocumentRequestReference;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * PrintDocumentRequest
 */
@JsonPropertyOrder({
  PrintDocumentRequest.JSON_PROPERTY_PRINTER_ALIAS_NAME,
  PrintDocumentRequest.JSON_PROPERTY_DATA,
  PrintDocumentRequest.JSON_PROPERTY_DATA_TYPE,
  PrintDocumentRequest.JSON_PROPERTY_DOCUMENT_TYPE,
  PrintDocumentRequest.JSON_PROPERTY_FORM_NAME,
  PrintDocumentRequest.JSON_PROPERTY_ORIENTATION,
  PrintDocumentRequest.JSON_PROPERTY_REFERENCE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-09-30T12:57:37.504069+05:30[Asia/Kolkata]", comments = "Generator version: 7.7.0")
public class PrintDocumentRequest {
  public static final String JSON_PROPERTY_PRINTER_ALIAS_NAME = "printerAliasName";
  private String printerAliasName;

  /**
   * Content/Identifier of document e.g. DOCUMENT_REFERECE_ID. Actual document name e.g. abc.pdf. [IN] i.e base64 string, URL, file path
   */
  public enum DataEnum {
    PDF("PDF"),
    
    URL("URL");

    private String value;

    DataEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static DataEnum fromValue(String value) {
      for (DataEnum b : DataEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_DATA = "data";
  private DataEnum data;

  /**
   * Data Type of the document e.g. DOCUMENT_REFERENCE. [IN/OUT]
   */
  public enum DataTypeEnum {
    BASE64("BASE64"),
    
    URL("URL");

    private String value;

    DataTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static DataTypeEnum fromValue(String value) {
      for (DataTypeEnum b : DataTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_DATA_TYPE = "dataType";
  private DataTypeEnum dataType;

  /**
   * The format of the document file the print takes.
   */
  public enum DocumentTypeEnum {
    ZPL2("ZPL2"),
    
    PDF("PDF");

    private String value;

    DocumentTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static DocumentTypeEnum fromValue(String value) {
      for (DocumentTypeEnum b : DocumentTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_DOCUMENT_TYPE = "documentType";
  private DocumentTypeEnum documentType;

  /**
   * The name of the Document Form.
   */
  public enum FormNameEnum {
    _8X11("8x11"),
    
    _4X6("4x6"),
    
    _2X1("2x1"),
    
    ENV10("ENV10"),
    
    ENV9("ENV9"),
    
    A1("A1");

    private String value;

    FormNameEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static FormNameEnum fromValue(String value) {
      for (FormNameEnum b : FormNameEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_FORM_NAME = "formName";
  private FormNameEnum formName;

  public static final String JSON_PROPERTY_ORIENTATION = "orientation";
  private String orientation;

  public static final String JSON_PROPERTY_REFERENCE = "reference";
  private PrintDocumentRequestReference reference;

  public PrintDocumentRequest() {
  }

  public PrintDocumentRequest printerAliasName(String printerAliasName) {
    
    this.printerAliasName = printerAliasName;
    return this;
  }

  /**
   * Name of the Printer connected (directly or via network) to a Computer. &#x60;Max length &#x3D; 30&#x60;
   * @return printerAliasName
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PRINTER_ALIAS_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getPrinterAliasName() {
    return printerAliasName;
  }


  @JsonProperty(JSON_PROPERTY_PRINTER_ALIAS_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPrinterAliasName(String printerAliasName) {
    this.printerAliasName = printerAliasName;
  }

  public PrintDocumentRequest data(DataEnum data) {
    
    this.data = data;
    return this;
  }

  /**
   * Content/Identifier of document e.g. DOCUMENT_REFERECE_ID. Actual document name e.g. abc.pdf. [IN] i.e base64 string, URL, file path
   * @return data
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DATA)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public DataEnum getData() {
    return data;
  }


  @JsonProperty(JSON_PROPERTY_DATA)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setData(DataEnum data) {
    this.data = data;
  }

  public PrintDocumentRequest dataType(DataTypeEnum dataType) {
    
    this.dataType = dataType;
    return this;
  }

  /**
   * Data Type of the document e.g. DOCUMENT_REFERENCE. [IN/OUT]
   * @return dataType
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DATA_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public DataTypeEnum getDataType() {
    return dataType;
  }


  @JsonProperty(JSON_PROPERTY_DATA_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDataType(DataTypeEnum dataType) {
    this.dataType = dataType;
  }

  public PrintDocumentRequest documentType(DocumentTypeEnum documentType) {
    
    this.documentType = documentType;
    return this;
  }

  /**
   * The format of the document file the print takes.
   * @return documentType
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DOCUMENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public DocumentTypeEnum getDocumentType() {
    return documentType;
  }


  @JsonProperty(JSON_PROPERTY_DOCUMENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDocumentType(DocumentTypeEnum documentType) {
    this.documentType = documentType;
  }

  public PrintDocumentRequest formName(FormNameEnum formName) {
    
    this.formName = formName;
    return this;
  }

  /**
   * The name of the Document Form.
   * @return formName
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_FORM_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public FormNameEnum getFormName() {
    return formName;
  }


  @JsonProperty(JSON_PROPERTY_FORM_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFormName(FormNameEnum formName) {
    this.formName = formName;
  }

  public PrintDocumentRequest orientation(String orientation) {
    
    this.orientation = orientation;
    return this;
  }

  /**
   * The orientation of the document layout: Portrait or Landscape.
   * @return orientation
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ORIENTATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getOrientation() {
    return orientation;
  }


  @JsonProperty(JSON_PROPERTY_ORIENTATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOrientation(String orientation) {
    this.orientation = orientation;
  }

  public PrintDocumentRequest reference(PrintDocumentRequestReference reference) {
    
    this.reference = reference;
    return this;
  }

  /**
   * Get reference
   * @return reference
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REFERENCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PrintDocumentRequestReference getReference() {
    return reference;
  }


  @JsonProperty(JSON_PROPERTY_REFERENCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setReference(PrintDocumentRequestReference reference) {
    this.reference = reference;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PrintDocumentRequest printDocumentRequest = (PrintDocumentRequest) o;
    return Objects.equals(this.printerAliasName, printDocumentRequest.printerAliasName) &&
        Objects.equals(this.data, printDocumentRequest.data) &&
        Objects.equals(this.dataType, printDocumentRequest.dataType) &&
        Objects.equals(this.documentType, printDocumentRequest.documentType) &&
        Objects.equals(this.formName, printDocumentRequest.formName) &&
        Objects.equals(this.orientation, printDocumentRequest.orientation) &&
        Objects.equals(this.reference, printDocumentRequest.reference);
  }

  @Override
  public int hashCode() {
    return Objects.hash(printerAliasName, data, dataType, documentType, formName, orientation, reference);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PrintDocumentRequest {\n");
    sb.append("    printerAliasName: ").append(toIndentedString(printerAliasName)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    dataType: ").append(toIndentedString(dataType)).append("\n");
    sb.append("    documentType: ").append(toIndentedString(documentType)).append("\n");
    sb.append("    formName: ").append(toIndentedString(formName)).append("\n");
    sb.append("    orientation: ").append(toIndentedString(orientation)).append("\n");
    sb.append("    reference: ").append(toIndentedString(reference)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

