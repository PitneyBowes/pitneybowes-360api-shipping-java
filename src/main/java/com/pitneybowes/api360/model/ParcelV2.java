/*
 * Shipping APIs
 * ### Introduction  The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.   Some of the key API operations available in the Shipping API includes: ### Shipment API  | Operation      | Description | | ----------- | ----------- |  | Get Carriers    | This operation fetches all onboarded carriers. Typically, user will use this service to get list of onboarded carriers and supported properties for those carriers.  |  | Get Countries | This operation fetches list of supported destination countries for a provided carrier and origin country.  |  | Get Services | This operation fetches a list of supported services for a carrier with respect to specific origin and destination country. |  | Get ParcelTypes| This operation fetches ParcelTypes based on carrier, origin and destination country. |  | Get Special Services| This operation fetches Special Services for a given carrier, service, origin and destination country. |  | Get Carrier Accounts| This operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier.  |  | Rate Shop and Get Single Rate| This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used mainly to a rate a shipment before creating shipment.  |  | Create Shipment| This operation creates a new Shipment or Shipment Label. This is for both Domestic and International. | | Get All Shipments| This operation fetches all created Shipments. |  | Get Shipment by Id| Retrieves single shipment using Shipment Id. |  | Reprint Shipment| This operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the Create Shipment response was spoilt or lost. |  | Cancel Shipment| This operation cancels previously created shipment. |  
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pitneybowes.api360.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * The details of the Parcel.
 */
@JsonPropertyOrder({
  ParcelV2.JSON_PROPERTY_LENGTH,
  ParcelV2.JSON_PROPERTY_WIDTH,
  ParcelV2.JSON_PROPERTY_HEIGHT,
  ParcelV2.JSON_PROPERTY_DIM_UNIT,
  ParcelV2.JSON_PROPERTY_WEIGHT_UNIT,
  ParcelV2.JSON_PROPERTY_WEIGHT,
  ParcelV2.JSON_PROPERTY_PACKAGE_VALUE
})
@JsonTypeName("parcelV2")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-09-30T12:57:37.504069+05:30[Asia/Kolkata]", comments = "Generator version: 7.7.0")
public class ParcelV2 {
  public static final String JSON_PROPERTY_LENGTH = "length";
  private Float length;

  public static final String JSON_PROPERTY_WIDTH = "width";
  private Float width;

  public static final String JSON_PROPERTY_HEIGHT = "height";
  private Float height;

  /**
   * DimUnit is a standard for measuring the physical quantities of specified dimension parameters.&lt;br /&gt; The valid values are: Inch and Centimeter.
   */
  public enum DimUnitEnum {
    IN("IN"),
    
    CM("CM");

    private String value;

    DimUnitEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static DimUnitEnum fromValue(String value) {
      for (DimUnitEnum b : DimUnitEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_DIM_UNIT = "dimUnit";
  private DimUnitEnum dimUnit;

  /**
   * WeightUnit is a standard for measuring the physical quantities of specified weight.&lt;br /&gt; The valid values are: Ounces and Grams.&lt;br /&gt; For USPS shipments, set this to OZ.
   */
  public enum WeightUnitEnum {
    OZ("OZ"),
    
    GM("GM");

    private String value;

    WeightUnitEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static WeightUnitEnum fromValue(String value) {
      for (WeightUnitEnum b : WeightUnitEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_WEIGHT_UNIT = "weightUnit";
  private WeightUnitEnum weightUnit;

  public static final String JSON_PROPERTY_WEIGHT = "weight";
  private Float weight;

  public static final String JSON_PROPERTY_PACKAGE_VALUE = "packageValue";
  private Float packageValue;

  public ParcelV2() {
  }

  public ParcelV2 length(Float length) {
    
    this.length = length;
    return this;
  }

  /**
   * Length is always the greatest of the three dimensions. The other two dimensions are used in the calculation of the girth.
   * @return length
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LENGTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Float getLength() {
    return length;
  }


  @JsonProperty(JSON_PROPERTY_LENGTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLength(Float length) {
    this.length = length;
  }

  public ParcelV2 width(Float width) {
    
    this.width = width;
    return this;
  }

  /**
   * There is no strict rule as to which element is the width or the height, but the width is the second greatest dimension of a parcel by convention.
   * @return width
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_WIDTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Float getWidth() {
    return width;
  }


  @JsonProperty(JSON_PROPERTY_WIDTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWidth(Float width) {
    this.width = width;
  }

  public ParcelV2 height(Float height) {
    
    this.height = height;
    return this;
  }

  /**
   * By convention the height is the smallest dimension of the parcel.
   * @return height
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HEIGHT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Float getHeight() {
    return height;
  }


  @JsonProperty(JSON_PROPERTY_HEIGHT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHeight(Float height) {
    this.height = height;
  }

  public ParcelV2 dimUnit(DimUnitEnum dimUnit) {
    
    this.dimUnit = dimUnit;
    return this;
  }

  /**
   * DimUnit is a standard for measuring the physical quantities of specified dimension parameters.&lt;br /&gt; The valid values are: Inch and Centimeter.
   * @return dimUnit
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DIM_UNIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public DimUnitEnum getDimUnit() {
    return dimUnit;
  }


  @JsonProperty(JSON_PROPERTY_DIM_UNIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDimUnit(DimUnitEnum dimUnit) {
    this.dimUnit = dimUnit;
  }

  public ParcelV2 weightUnit(WeightUnitEnum weightUnit) {
    
    this.weightUnit = weightUnit;
    return this;
  }

  /**
   * WeightUnit is a standard for measuring the physical quantities of specified weight.&lt;br /&gt; The valid values are: Ounces and Grams.&lt;br /&gt; For USPS shipments, set this to OZ.
   * @return weightUnit
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_WEIGHT_UNIT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public WeightUnitEnum getWeightUnit() {
    return weightUnit;
  }


  @JsonProperty(JSON_PROPERTY_WEIGHT_UNIT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setWeightUnit(WeightUnitEnum weightUnit) {
    this.weightUnit = weightUnit;
  }

  public ParcelV2 weight(Float weight) {
    
    this.weight = weight;
    return this;
  }

  /**
   * Weight measures the heaviness of an object (how heavy an object is) .
   * @return weight
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_WEIGHT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Float getWeight() {
    return weight;
  }


  @JsonProperty(JSON_PROPERTY_WEIGHT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWeight(Float weight) {
    this.weight = weight;
  }

  public ParcelV2 packageValue(Float packageValue) {
    
    this.packageValue = packageValue;
    return this;
  }

  /**
   * Indicates value of the package.
   * @return packageValue
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PACKAGE_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Float getPackageValue() {
    return packageValue;
  }


  @JsonProperty(JSON_PROPERTY_PACKAGE_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPackageValue(Float packageValue) {
    this.packageValue = packageValue;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ParcelV2 parcelV2 = (ParcelV2) o;
    return Objects.equals(this.length, parcelV2.length) &&
        Objects.equals(this.width, parcelV2.width) &&
        Objects.equals(this.height, parcelV2.height) &&
        Objects.equals(this.dimUnit, parcelV2.dimUnit) &&
        Objects.equals(this.weightUnit, parcelV2.weightUnit) &&
        Objects.equals(this.weight, parcelV2.weight) &&
        Objects.equals(this.packageValue, parcelV2.packageValue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(length, width, height, dimUnit, weightUnit, weight, packageValue);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ParcelV2 {\n");
    sb.append("    length: ").append(toIndentedString(length)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    dimUnit: ").append(toIndentedString(dimUnit)).append("\n");
    sb.append("    weightUnit: ").append(toIndentedString(weightUnit)).append("\n");
    sb.append("    weight: ").append(toIndentedString(weight)).append("\n");
    sb.append("    packageValue: ").append(toIndentedString(packageValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

