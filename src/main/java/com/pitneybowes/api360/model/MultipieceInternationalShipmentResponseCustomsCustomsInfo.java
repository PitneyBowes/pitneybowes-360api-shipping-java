/*
 * Shipping APIs
 * ### Introduction  The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.   Some of the key API operations available in the Shipping API includes: ### Shipment API  | Operation      | Description | | ----------- | ----------- |  | Get Carriers    | This operation fetches all onboarded carriers. Typically, user will use this service to get list of onboarded carriers and supported properties for those carriers.  |  | Get Countries | This operation fetches list of supported destination countries for a provided carrier and origin country.  |  | Get Services | This operation fetches a list of supported services for a carrier with respect to specific origin and destination country. |  | Get ParcelTypes| This operation fetches ParcelTypes based on carrier, origin and destination country. |  | Get Special Services| This operation fetches Special Services for a given carrier, service, origin and destination country. |  | Get Carrier Accounts| This operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier.  |  | Rate Shop and Get Single Rate| This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used mainly to a rate a shipment before creating shipment.  |  | Create Shipment| This operation creates a new Shipment or Shipment Label. This is for both Domestic and International. | | Get All Shipments| This operation fetches all created Shipments. |  | Get Shipment by Id| Retrieves single shipment using Shipment Id. |  | Reprint Shipment| This operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the Create Shipment response was spoilt or lost. |  | Cancel Shipment| This operation cancels previously created shipment. |  
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pitneybowes.api360.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * This is additional customs information required along with item details.
 */
@JsonPropertyOrder({
  MultipieceInternationalShipmentResponseCustomsCustomsInfo.JSON_PROPERTY_REASON_FOR_EXPORT,
  MultipieceInternationalShipmentResponseCustomsCustomsInfo.JSON_PROPERTY_CUSTOMS_DECLARED_VALUE,
  MultipieceInternationalShipmentResponseCustomsCustomsInfo.JSON_PROPERTY_CURRENCY_CODE,
  MultipieceInternationalShipmentResponseCustomsCustomsInfo.JSON_PROPERTY_E_E_L_P_F_C,
  MultipieceInternationalShipmentResponseCustomsCustomsInfo.JSON_PROPERTY_CERTIFICATE_NUMBER,
  MultipieceInternationalShipmentResponseCustomsCustomsInfo.JSON_PROPERTY_COMMENTS,
  MultipieceInternationalShipmentResponseCustomsCustomsInfo.JSON_PROPERTY_FROM_CUSTOMS_REFERENCE,
  MultipieceInternationalShipmentResponseCustomsCustomsInfo.JSON_PROPERTY_IMPORTER_CUSTOMS_REFERENCE,
  MultipieceInternationalShipmentResponseCustomsCustomsInfo.JSON_PROPERTY_INVOICE_NUMBER,
  MultipieceInternationalShipmentResponseCustomsCustomsInfo.JSON_PROPERTY_LICENSE_NUMBER,
  MultipieceInternationalShipmentResponseCustomsCustomsInfo.JSON_PROPERTY_SDR_VALUE
})
@JsonTypeName("MultipieceInternationalShipmentResponse_customs_customsInfo")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-09-30T12:57:37.504069+05:30[Asia/Kolkata]", comments = "Generator version: 7.7.0")
public class MultipieceInternationalShipmentResponseCustomsCustomsInfo {
  /**
   * The reason the commodity is being exported.
   */
  public enum ReasonForExportEnum {
    GIFT("GIFT"),
    
    COMMERCIAL_SAMPLE("COMMERCIAL_SAMPLE"),
    
    MERCHANDISE("MERCHANDISE"),
    
    DOCUMENTS("DOCUMENTS"),
    
    RETURNED_GOODS("RETURNED_GOODS"),
    
    OTHER("OTHER");

    private String value;

    ReasonForExportEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ReasonForExportEnum fromValue(String value) {
      for (ReasonForExportEnum b : ReasonForExportEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_REASON_FOR_EXPORT = "reasonForExport";
  private ReasonForExportEnum reasonForExport;

  public static final String JSON_PROPERTY_CUSTOMS_DECLARED_VALUE = "customsDeclaredValue";
  private BigDecimal customsDeclaredValue;

  public static final String JSON_PROPERTY_CURRENCY_CODE = "currencyCode";
  private String currencyCode;

  public static final String JSON_PROPERTY_E_E_L_P_F_C = "EELPFC";
  private String EELPFC;

  public static final String JSON_PROPERTY_CERTIFICATE_NUMBER = "certificateNumber";
  private String certificateNumber;

  public static final String JSON_PROPERTY_COMMENTS = "comments";
  private String comments;

  public static final String JSON_PROPERTY_FROM_CUSTOMS_REFERENCE = "fromCustomsReference";
  private String fromCustomsReference;

  public static final String JSON_PROPERTY_IMPORTER_CUSTOMS_REFERENCE = "importerCustomsReference";
  private String importerCustomsReference;

  public static final String JSON_PROPERTY_INVOICE_NUMBER = "invoiceNumber";
  private String invoiceNumber;

  public static final String JSON_PROPERTY_LICENSE_NUMBER = "licenseNumber";
  private String licenseNumber;

  public static final String JSON_PROPERTY_SDR_VALUE = "sdrValue";
  private BigDecimal sdrValue;

  public MultipieceInternationalShipmentResponseCustomsCustomsInfo() {
  }

  public MultipieceInternationalShipmentResponseCustomsCustomsInfo reasonForExport(ReasonForExportEnum reasonForExport) {
    
    this.reasonForExport = reasonForExport;
    return this;
  }

  /**
   * The reason the commodity is being exported.
   * @return reasonForExport
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_REASON_FOR_EXPORT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public ReasonForExportEnum getReasonForExport() {
    return reasonForExport;
  }


  @JsonProperty(JSON_PROPERTY_REASON_FOR_EXPORT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setReasonForExport(ReasonForExportEnum reasonForExport) {
    this.reasonForExport = reasonForExport;
  }

  public MultipieceInternationalShipmentResponseCustomsCustomsInfo customsDeclaredValue(BigDecimal customsDeclaredValue) {
    
    this.customsDeclaredValue = customsDeclaredValue;
    return this;
  }

  /**
   * Item value in mentioned currencyCode
   * @return customsDeclaredValue
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CUSTOMS_DECLARED_VALUE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public BigDecimal getCustomsDeclaredValue() {
    return customsDeclaredValue;
  }


  @JsonProperty(JSON_PROPERTY_CUSTOMS_DECLARED_VALUE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCustomsDeclaredValue(BigDecimal customsDeclaredValue) {
    this.customsDeclaredValue = customsDeclaredValue;
  }

  public MultipieceInternationalShipmentResponseCustomsCustomsInfo currencyCode(String currencyCode) {
    
    this.currencyCode = currencyCode;
    return this;
  }

  /**
   * The currency used for declared value. Use three uppercase letters, per ISO 4217
   * @return currencyCode
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CURRENCY_CODE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getCurrencyCode() {
    return currencyCode;
  }


  @JsonProperty(JSON_PROPERTY_CURRENCY_CODE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }

  public MultipieceInternationalShipmentResponseCustomsCustomsInfo EELPFC(String EELPFC) {
    
    this.EELPFC = EELPFC;
    return this;
  }

  /**
   * A number provided by the Automated Export System (AES). This is required if the item is valued at more than $2,500 USD per Schedule B export codes.
   * @return EELPFC
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_E_E_L_P_F_C)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getEELPFC() {
    return EELPFC;
  }


  @JsonProperty(JSON_PROPERTY_E_E_L_P_F_C)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEELPFC(String EELPFC) {
    this.EELPFC = EELPFC;
  }

  public MultipieceInternationalShipmentResponseCustomsCustomsInfo certificateNumber(String certificateNumber) {
    
    this.certificateNumber = certificateNumber;
    return this;
  }

  /**
   * The certificate number associated with the commodity.
   * @return certificateNumber
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CERTIFICATE_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCertificateNumber() {
    return certificateNumber;
  }


  @JsonProperty(JSON_PROPERTY_CERTIFICATE_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCertificateNumber(String certificateNumber) {
    this.certificateNumber = certificateNumber;
  }

  public MultipieceInternationalShipmentResponseCustomsCustomsInfo comments(String comments) {
    
    this.comments = comments;
    return this;
  }

  /**
   * Free-form comments regarding the exported shipment.
   * @return comments
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COMMENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getComments() {
    return comments;
  }


  @JsonProperty(JSON_PROPERTY_COMMENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setComments(String comments) {
    this.comments = comments;
  }

  public MultipieceInternationalShipmentResponseCustomsCustomsInfo fromCustomsReference(String fromCustomsReference) {
    
    this.fromCustomsReference = fromCustomsReference;
    return this;
  }

  /**
   * Free-form reference information provided by the requestor of the shipment. Depending on the carrier this information may or may not be rendered on the customs documents.
   * @return fromCustomsReference
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FROM_CUSTOMS_REFERENCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFromCustomsReference() {
    return fromCustomsReference;
  }


  @JsonProperty(JSON_PROPERTY_FROM_CUSTOMS_REFERENCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFromCustomsReference(String fromCustomsReference) {
    this.fromCustomsReference = fromCustomsReference;
  }

  public MultipieceInternationalShipmentResponseCustomsCustomsInfo importerCustomsReference(String importerCustomsReference) {
    
    this.importerCustomsReference = importerCustomsReference;
    return this;
  }

  /**
   * A reference number used by the importer, such as a VAT number, PO number, or insured number.
   * @return importerCustomsReference
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IMPORTER_CUSTOMS_REFERENCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getImporterCustomsReference() {
    return importerCustomsReference;
  }


  @JsonProperty(JSON_PROPERTY_IMPORTER_CUSTOMS_REFERENCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setImporterCustomsReference(String importerCustomsReference) {
    this.importerCustomsReference = importerCustomsReference;
  }

  public MultipieceInternationalShipmentResponseCustomsCustomsInfo invoiceNumber(String invoiceNumber) {
    
    this.invoiceNumber = invoiceNumber;
    return this;
  }

  /**
   * The commercial invoice number assigned by the exporter.
   * @return invoiceNumber
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INVOICE_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getInvoiceNumber() {
    return invoiceNumber;
  }


  @JsonProperty(JSON_PROPERTY_INVOICE_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInvoiceNumber(String invoiceNumber) {
    this.invoiceNumber = invoiceNumber;
  }

  public MultipieceInternationalShipmentResponseCustomsCustomsInfo licenseNumber(String licenseNumber) {
    
    this.licenseNumber = licenseNumber;
    return this;
  }

  /**
   * The export license number associated with the commodity.
   * @return licenseNumber
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LICENSE_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getLicenseNumber() {
    return licenseNumber;
  }


  @JsonProperty(JSON_PROPERTY_LICENSE_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLicenseNumber(String licenseNumber) {
    this.licenseNumber = licenseNumber;
  }

  public MultipieceInternationalShipmentResponseCustomsCustomsInfo sdrValue(BigDecimal sdrValue) {
    
    this.sdrValue = sdrValue;
    return this;
  }

  /**
   * When an international parcel is insured, the insured value must be expressed in Special Drawing Rights values.
   * @return sdrValue
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SDR_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getSdrValue() {
    return sdrValue;
  }


  @JsonProperty(JSON_PROPERTY_SDR_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSdrValue(BigDecimal sdrValue) {
    this.sdrValue = sdrValue;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MultipieceInternationalShipmentResponseCustomsCustomsInfo multipieceInternationalShipmentResponseCustomsCustomsInfo = (MultipieceInternationalShipmentResponseCustomsCustomsInfo) o;
    return Objects.equals(this.reasonForExport, multipieceInternationalShipmentResponseCustomsCustomsInfo.reasonForExport) &&
        Objects.equals(this.customsDeclaredValue, multipieceInternationalShipmentResponseCustomsCustomsInfo.customsDeclaredValue) &&
        Objects.equals(this.currencyCode, multipieceInternationalShipmentResponseCustomsCustomsInfo.currencyCode) &&
        Objects.equals(this.EELPFC, multipieceInternationalShipmentResponseCustomsCustomsInfo.EELPFC) &&
        Objects.equals(this.certificateNumber, multipieceInternationalShipmentResponseCustomsCustomsInfo.certificateNumber) &&
        Objects.equals(this.comments, multipieceInternationalShipmentResponseCustomsCustomsInfo.comments) &&
        Objects.equals(this.fromCustomsReference, multipieceInternationalShipmentResponseCustomsCustomsInfo.fromCustomsReference) &&
        Objects.equals(this.importerCustomsReference, multipieceInternationalShipmentResponseCustomsCustomsInfo.importerCustomsReference) &&
        Objects.equals(this.invoiceNumber, multipieceInternationalShipmentResponseCustomsCustomsInfo.invoiceNumber) &&
        Objects.equals(this.licenseNumber, multipieceInternationalShipmentResponseCustomsCustomsInfo.licenseNumber) &&
        Objects.equals(this.sdrValue, multipieceInternationalShipmentResponseCustomsCustomsInfo.sdrValue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(reasonForExport, customsDeclaredValue, currencyCode, EELPFC, certificateNumber, comments, fromCustomsReference, importerCustomsReference, invoiceNumber, licenseNumber, sdrValue);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MultipieceInternationalShipmentResponseCustomsCustomsInfo {\n");
    sb.append("    reasonForExport: ").append(toIndentedString(reasonForExport)).append("\n");
    sb.append("    customsDeclaredValue: ").append(toIndentedString(customsDeclaredValue)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    EELPFC: ").append(toIndentedString(EELPFC)).append("\n");
    sb.append("    certificateNumber: ").append(toIndentedString(certificateNumber)).append("\n");
    sb.append("    comments: ").append(toIndentedString(comments)).append("\n");
    sb.append("    fromCustomsReference: ").append(toIndentedString(fromCustomsReference)).append("\n");
    sb.append("    importerCustomsReference: ").append(toIndentedString(importerCustomsReference)).append("\n");
    sb.append("    invoiceNumber: ").append(toIndentedString(invoiceNumber)).append("\n");
    sb.append("    licenseNumber: ").append(toIndentedString(licenseNumber)).append("\n");
    sb.append("    sdrValue: ").append(toIndentedString(sdrValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

