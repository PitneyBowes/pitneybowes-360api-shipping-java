/*
 * Shipping APIs
 * ### Introduction  The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.   Some of the key API operations available in the Shipping API includes: ### Shipment API  | Operation      | Description | | ----------- | ----------- |  | Get Carriers    | This operation fetches all onboarded carriers. Typically, user will use this service to get list of onboarded carriers and supported properties for those carriers.  |  | Get Countries | This operation fetches list of supported destination countries for a provided carrier and origin country.  |  | Get Services | This operation fetches a list of supported services for a carrier with respect to specific origin and destination country. |  | Get ParcelTypes| This operation fetches ParcelTypes based on carrier, origin and destination country. |  | Get Special Services| This operation fetches Special Services for a given carrier, service, origin and destination country. |  | Get Carrier Accounts| This operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier.  |  | Rate Shop and Get Single Rate| This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used mainly to a rate a shipment before creating shipment.  |  | Create Shipment| This operation creates a new Shipment or Shipment Label. This is for both Domestic and International. | | Get All Shipments| This operation fetches all created Shipments. |  | Get Shipment by Id| Retrieves single shipment using Shipment Id. |  | Reprint Shipment| This operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the Create Shipment response was spoilt or lost. |  | Cancel Shipment| This operation cancels previously created shipment. |  
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pitneybowes.api360.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * References are tags or information that is printed on Shipping Label based on the customer&#39;s requirement. &lt;br /&gt; Reference Fields can have values/indication like department name, invoice no., package description, purchase order no., carrier note, cost account no., transportation no., or PO no., etc. &lt;br /&gt; Each of the reference field can have only one indication/value. 
 */
@JsonPropertyOrder({
  ReferenceV2.JSON_PROPERTY_REFERENCE1,
  ReferenceV2.JSON_PROPERTY_REFERENCE2,
  ReferenceV2.JSON_PROPERTY_REFERENCE3,
  ReferenceV2.JSON_PROPERTY_REFERENCE4,
  ReferenceV2.JSON_PROPERTY_PO_NUMBER,
  ReferenceV2.JSON_PROPERTY_DEPARTMENT,
  ReferenceV2.JSON_PROPERTY_ADDITIONAL_REFERENCE1,
  ReferenceV2.JSON_PROPERTY_ADDITIONAL_REFERENCE2
})
@JsonTypeName("referenceV2")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-09-30T12:57:37.504069+05:30[Asia/Kolkata]", comments = "Generator version: 7.7.0")
public class ReferenceV2 {
  public static final String JSON_PROPERTY_REFERENCE1 = "reference1";
  private String reference1;

  public static final String JSON_PROPERTY_REFERENCE2 = "reference2";
  private String reference2;

  public static final String JSON_PROPERTY_REFERENCE3 = "reference3";
  private String reference3;

  public static final String JSON_PROPERTY_REFERENCE4 = "reference4";
  private String reference4;

  public static final String JSON_PROPERTY_PO_NUMBER = "poNumber";
  private String poNumber;

  public static final String JSON_PROPERTY_DEPARTMENT = "department";
  private String department;

  public static final String JSON_PROPERTY_ADDITIONAL_REFERENCE1 = "additionalReference1";
  private String additionalReference1;

  public static final String JSON_PROPERTY_ADDITIONAL_REFERENCE2 = "additionalReference2";
  private String additionalReference2;

  public ReferenceV2() {
  }

  public ReferenceV2 reference1(String reference1) {
    
    this.reference1 = reference1;
    return this;
  }

  /**
   * Reference 1 can have one of the above-indicated values/information, which is printed on Label, e.g. Cost Account No. (if any) or Invoice Number. &lt;br /&gt; &#x60;Max length &#x3D; 30&#x60;.
   * @return reference1
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REFERENCE1)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getReference1() {
    return reference1;
  }


  @JsonProperty(JSON_PROPERTY_REFERENCE1)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setReference1(String reference1) {
    this.reference1 = reference1;
  }

  public ReferenceV2 reference2(String reference2) {
    
    this.reference2 = reference2;
    return this;
  }

  /**
   * Reference 2 can have other details as indicated in the example values above. This is also printed on Label, e.g. Package Description . &lt;br /&gt; &#x60;Max length &#x3D; 30&#x60;.
   * @return reference2
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REFERENCE2)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getReference2() {
    return reference2;
  }


  @JsonProperty(JSON_PROPERTY_REFERENCE2)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setReference2(String reference2) {
    this.reference2 = reference2;
  }

  public ReferenceV2 reference3(String reference3) {
    
    this.reference3 = reference3;
    return this;
  }

  /**
   * Reference 3 can have the information which were not fulfilled in Ref1 and Ref2, e.g. Order No. or Purchase Order ID. &lt;br /&gt; &#x60;Max length &#x3D; 30&#x60;.
   * @return reference3
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REFERENCE3)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getReference3() {
    return reference3;
  }


  @JsonProperty(JSON_PROPERTY_REFERENCE3)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setReference3(String reference3) {
    this.reference3 = reference3;
  }

  public ReferenceV2 reference4(String reference4) {
    
    this.reference4 = reference4;
    return this;
  }

  /**
   * Reference 4 can have more information which were not provided in Ref1, Ref2, or Ref3 e.g. Carrier Note. &lt;br /&gt; &#x60;Max length &#x3D; 30&#x60;.
   * @return reference4
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REFERENCE4)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getReference4() {
    return reference4;
  }


  @JsonProperty(JSON_PROPERTY_REFERENCE4)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setReference4(String reference4) {
    this.reference4 = reference4;
  }

  public ReferenceV2 poNumber(String poNumber) {
    
    this.poNumber = poNumber;
    return this;
  }

  /**
   * The Postal Office Number. &lt;br /&gt; &#x60;Max length &#x3D; 30&#x60;.
   * @return poNumber
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PO_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPoNumber() {
    return poNumber;
  }


  @JsonProperty(JSON_PROPERTY_PO_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPoNumber(String poNumber) {
    this.poNumber = poNumber;
  }

  public ReferenceV2 department(String department) {
    
    this.department = department;
    return this;
  }

  /**
   * The department of the Recipient. &lt;br /&gt; &#x60;Max length &#x3D; 30&#x60;.
   * @return department
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DEPARTMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDepartment() {
    return department;
  }


  @JsonProperty(JSON_PROPERTY_DEPARTMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDepartment(String department) {
    this.department = department;
  }

  public ReferenceV2 additionalReference1(String additionalReference1) {
    
    this.additionalReference1 = additionalReference1;
    return this;
  }

  /**
   * Additional Reference is hardly used, but sender can mention anything as per requirement, just for Recipient&#39;s information. &lt;br /&gt; &#x60;Max length &#x3D; 30&#x60;.
   * @return additionalReference1
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ADDITIONAL_REFERENCE1)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAdditionalReference1() {
    return additionalReference1;
  }


  @JsonProperty(JSON_PROPERTY_ADDITIONAL_REFERENCE1)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAdditionalReference1(String additionalReference1) {
    this.additionalReference1 = additionalReference1;
  }

  public ReferenceV2 additionalReference2(String additionalReference2) {
    
    this.additionalReference2 = additionalReference2;
    return this;
  }

  /**
   * Any tags or information that to be shown to Recipient, can be mentioned by Sender, which is not indicated on AdditionalReference1 field, e.g. PO No, Order No. etc.&lt;br /&gt; &#x60;Max length &#x3D; 30&#x60;.
   * @return additionalReference2
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ADDITIONAL_REFERENCE2)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAdditionalReference2() {
    return additionalReference2;
  }


  @JsonProperty(JSON_PROPERTY_ADDITIONAL_REFERENCE2)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAdditionalReference2(String additionalReference2) {
    this.additionalReference2 = additionalReference2;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReferenceV2 referenceV2 = (ReferenceV2) o;
    return Objects.equals(this.reference1, referenceV2.reference1) &&
        Objects.equals(this.reference2, referenceV2.reference2) &&
        Objects.equals(this.reference3, referenceV2.reference3) &&
        Objects.equals(this.reference4, referenceV2.reference4) &&
        Objects.equals(this.poNumber, referenceV2.poNumber) &&
        Objects.equals(this.department, referenceV2.department) &&
        Objects.equals(this.additionalReference1, referenceV2.additionalReference1) &&
        Objects.equals(this.additionalReference2, referenceV2.additionalReference2);
  }

  @Override
  public int hashCode() {
    return Objects.hash(reference1, reference2, reference3, reference4, poNumber, department, additionalReference1, additionalReference2);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReferenceV2 {\n");
    sb.append("    reference1: ").append(toIndentedString(reference1)).append("\n");
    sb.append("    reference2: ").append(toIndentedString(reference2)).append("\n");
    sb.append("    reference3: ").append(toIndentedString(reference3)).append("\n");
    sb.append("    reference4: ").append(toIndentedString(reference4)).append("\n");
    sb.append("    poNumber: ").append(toIndentedString(poNumber)).append("\n");
    sb.append("    department: ").append(toIndentedString(department)).append("\n");
    sb.append("    additionalReference1: ").append(toIndentedString(additionalReference1)).append("\n");
    sb.append("    additionalReference2: ").append(toIndentedString(additionalReference2)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

