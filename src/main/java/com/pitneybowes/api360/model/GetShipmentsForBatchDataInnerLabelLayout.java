/*
 * Shipping APIs
 * ### Introduction  The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.   Some of the key API operations available in the Shipping API includes: ### Shipment API  | Operation      | Description | | ----------- | ----------- |  | Get Carriers    | This operation fetches all onboarded carriers. Typically, user will use this service to get list of onboarded carriers and supported properties for those carriers.  |  | Get Countries | This operation fetches list of supported destination countries for a provided carrier and origin country.  |  | Get Services | This operation fetches a list of supported services for a carrier with respect to specific origin and destination country. |  | Get ParcelTypes| This operation fetches ParcelTypes based on carrier, origin and destination country. |  | Get Special Services| This operation fetches Special Services for a given carrier, service, origin and destination country. |  | Get Carrier Accounts| This operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier.  |  | Rate Shop and Get Single Rate| This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used mainly to a rate a shipment before creating shipment.  |  | Create Shipment| This operation creates a new Shipment or Shipment Label. This is for both Domestic and International. | | Get All Shipments| This operation fetches all created Shipments. |  | Get Shipment by Id| Retrieves single shipment using Shipment Id. |  | Reprint Shipment| This operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the Create Shipment response was spoilt or lost. |  | Cancel Shipment| This operation cancels previously created shipment. |  
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pitneybowes.api360.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Label layout details
 */
@JsonPropertyOrder({
  GetShipmentsForBatchDataInnerLabelLayout.JSON_PROPERTY_FILE_FORMAT,
  GetShipmentsForBatchDataInnerLabelLayout.JSON_PROPERTY_PRINT_RECEIPT,
  GetShipmentsForBatchDataInnerLabelLayout.JSON_PROPERTY_SIZE,
  GetShipmentsForBatchDataInnerLabelLayout.JSON_PROPERTY_TYPE
})
@JsonTypeName("getShipmentsForBatch_data_inner_labelLayout")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-09-30T12:57:37.504069+05:30[Asia/Kolkata]", comments = "Generator version: 7.7.0")
public class GetShipmentsForBatchDataInnerLabelLayout {
  public static final String JSON_PROPERTY_FILE_FORMAT = "fileFormat";
  private String fileFormat;

  public static final String JSON_PROPERTY_PRINT_RECEIPT = "printReceipt";
  private Boolean printReceipt;

  /**
   * Defines the label size of the Shipment, that is, the Shipping Label is available in different Doc Size.
   */
  public enum SizeEnum {
    _8_X11("DOC_8X11"),
    
    _4_X6("DOC_4X6");

    private String value;

    SizeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static SizeEnum fromValue(String value) {
      for (SizeEnum b : SizeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_SIZE = "size";
  private SizeEnum size;

  public static final String JSON_PROPERTY_TYPE = "type";
  private String type;

  public GetShipmentsForBatchDataInnerLabelLayout() {
  }

  public GetShipmentsForBatchDataInnerLabelLayout fileFormat(String fileFormat) {
    
    this.fileFormat = fileFormat;
    return this;
  }

  /**
   * Defines the format of the document file the print takes.
   * @return fileFormat
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FILE_FORMAT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFileFormat() {
    return fileFormat;
  }


  @JsonProperty(JSON_PROPERTY_FILE_FORMAT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFileFormat(String fileFormat) {
    this.fileFormat = fileFormat;
  }

  public GetShipmentsForBatchDataInnerLabelLayout printReceipt(Boolean printReceipt) {
    
    this.printReceipt = printReceipt;
    return this;
  }

  /**
   * This option asks if the receipt is to be printed.
   * @return printReceipt
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PRINT_RECEIPT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getPrintReceipt() {
    return printReceipt;
  }


  @JsonProperty(JSON_PROPERTY_PRINT_RECEIPT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPrintReceipt(Boolean printReceipt) {
    this.printReceipt = printReceipt;
  }

  public GetShipmentsForBatchDataInnerLabelLayout size(SizeEnum size) {
    
    this.size = size;
    return this;
  }

  /**
   * Defines the label size of the Shipment, that is, the Shipping Label is available in different Doc Size.
   * @return size
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public SizeEnum getSize() {
    return size;
  }


  @JsonProperty(JSON_PROPERTY_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSize(SizeEnum size) {
    this.size = size;
  }

  public GetShipmentsForBatchDataInnerLabelLayout type(String type) {
    
    this.type = type;
    return this;
  }

  /**
   * This indicates the type of the label
   * @return type
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setType(String type) {
    this.type = type;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetShipmentsForBatchDataInnerLabelLayout getShipmentsForBatchDataInnerLabelLayout = (GetShipmentsForBatchDataInnerLabelLayout) o;
    return Objects.equals(this.fileFormat, getShipmentsForBatchDataInnerLabelLayout.fileFormat) &&
        Objects.equals(this.printReceipt, getShipmentsForBatchDataInnerLabelLayout.printReceipt) &&
        Objects.equals(this.size, getShipmentsForBatchDataInnerLabelLayout.size) &&
        Objects.equals(this.type, getShipmentsForBatchDataInnerLabelLayout.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fileFormat, printReceipt, size, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetShipmentsForBatchDataInnerLabelLayout {\n");
    sb.append("    fileFormat: ").append(toIndentedString(fileFormat)).append("\n");
    sb.append("    printReceipt: ").append(toIndentedString(printReceipt)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

